{"version":3,"sources":["services/data-handler.js","components/utils.js","search.svg","components/searchBox/search-view.jsx","components/searchBox/search-container.jsx","components/app/App.js","reportWebVitals.js","index.js"],"names":["getSearchData","searchValue","url","apiUrl","fetch","then","response","json","data","searchData","info","list","results","map","itemObj","id","name","formatData","SearchView","props","onInputChange","loadMoreData","useState","value","setValue","isSearching","setIsSearching","searchBox","useRef","debounceScrollHandler","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","scrollTop","scrollHeight","clientHeight","next","useEffect","current","focus","className","src","searchLogo","alt","type","onChange","e","changeHandler","currentTarget","ref","length","style","margin","onScroll","onClick","SearchContainer","setSearchData","inputChangeHandler","a","result","loadMoreHandler","updateResult","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f62b82a.chunk.js","sourcesContent":["import { formatData } from \"../components/utils\";\r\n\r\nexport const getSearchData = (searchValue, url) => {\r\n  const apiUrl =\r\n    url || `https://rickandmortyapi.com/api/character/?name=${searchValue}`;\r\n  return fetch(apiUrl)\r\n    .then((response) => response.json())\r\n    .then((data) => formatData(data));\r\n};\r\n","export const formatData = (data) => {\r\n  const searchData = { info: {}, list: [] };\r\n  if (data) {\r\n    searchData.info = data.info ? { ...data.info } : {};\r\n    searchData.list = data.results\r\n      ? data.results?.map((itemObj) => {\r\n          return {\r\n            id: itemObj.id,\r\n            name: itemObj.name,\r\n          };\r\n        })\r\n      : [];\r\n  }\r\n  return searchData;\r\n};\r\n\r\nexport const debounce = (func, wait, immediate) => {\r\n  var timeout;\r\n\r\n  return function executedFunction() {\r\n    var context = this;\r\n    var args = arguments;\r\n    var later = function () {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    var callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/search.8e55e40c.svg\";","import { useEffect, useRef, useState } from \"react\";\r\nimport searchLogo from \"../../search.svg\";\r\nimport { debounce } from \"../utils\";\r\nimport \"./search.css\";\r\n\r\nconst SearchView = (props) => {\r\n  const {\r\n    searchData: { list, info },\r\n    onInputChange,\r\n    loadMoreData,\r\n  } = props;\r\n\r\n  const [value, setValue] = useState(\"\");\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const searchBox = useRef(null);\r\n\r\n  const renderSearchList = () => {\r\n    return list.map(({ id, name }) => {\r\n      return (\r\n        <li key={id} className=\"list-item\">\r\n          {name}\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n  const scrollhandler = ({ scrollTop, scrollHeight, clientHeight }) => {\r\n    if (scrollTop + clientHeight >= scrollHeight - 5) {\r\n      if (info && info.next) {\r\n        loadMoreData(value, info.next);\r\n      }\r\n    }\r\n  };\r\n  const changeHandler = (value) => {\r\n    setValue(value);\r\n    onInputChange(value);\r\n  };\r\n  const debounceScrollHandler = debounce(scrollhandler, 250);\r\n\r\n  const handleSearchClick = () => {\r\n    if (!isSearching) {\r\n      onInputChange(\"\");\r\n    }\r\n    setIsSearching(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isSearching) {\r\n      searchBox.current.focus();\r\n    }\r\n  }, [isSearching]);\r\n\r\n  return !isSearching ? (\r\n    <div\r\n      className=\"notsearch-box-container\"\r\n      onClick={() => handleSearchClick()}\r\n    >\r\n      <img src={searchLogo} alt=\"\" className=\"search-icon\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"search-box-container\">\r\n      <div className=\"input-box-container\">\r\n        <img src={searchLogo} alt=\"\" className=\"search-icon\" />\r\n        <input\r\n          className=\"input-box\"\r\n          type=\"text\"\r\n          onChange={(e) => changeHandler(e.currentTarget.value)}\r\n          value={value}\r\n          ref={searchBox}\r\n        />\r\n      </div>\r\n      {list && list.length ? <hr style={{ margin: \"0px\" }} /> : null}\r\n      {list && list.length ? (\r\n        <ul\r\n          className=\"search-list-container\"\r\n          onScroll={(e) => debounceScrollHandler(e.currentTarget)}\r\n        >\r\n          {renderSearchList()}\r\n        </ul>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchView;\r\n","import { useState } from \"react\";\r\nimport { getSearchData } from \"../../services/data-handler\";\r\nimport SearchView from \"./search-view\";\r\n\r\nconst SearchContainer = () => {\r\n  const [searchData, setSearchData] = useState({});\r\n  const inputChangeHandler = async (value) => {\r\n    const result = await getSearchData(value);\r\n    setSearchData({ ...result });\r\n  };\r\n\r\n  const loadMoreHandler = async (value, url) => {\r\n    const result = await getSearchData(value, url);\r\n    let updateResult = {\r\n      info: result?.info,\r\n      list: [...searchData.list, ...result.list],\r\n    };\r\n    setSearchData({ ...updateResult });\r\n  };\r\n\r\n  return (\r\n    <SearchView\r\n      onInputChange={inputChangeHandler}\r\n      searchData={searchData}\r\n      loadMoreData={loadMoreHandler}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchContainer;\r\n","import { SearchBox } from \"../searchBox\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <SearchBox />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}